// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserSex {
  MALE
  FEMALE
}

model Grades {
  grade_id String @id
  Students Students[] @relation(name: "studentTograde")
  Subjects Subjects[] @relation(name: "subjectTograde")
}

model Subjects {
  subject_id String @id @default(cuid())
  subject_name String 
  price Decimal @db.Decimal(5, 2)
  grade_id String
  teacher_portion Decimal @db.Decimal(5, 2)

  Grades Grades @relation(name: "subjectTograde", fields: [grade_id], references: [grade_id], onDelete: NoAction, onUpdate: Cascade)
  StudentSubjects StudentSubjects[] @relation(name: "StudentSubjectsTosubject")
  TeacherSubjects TeacherSubjects[] @relation(name: "teachersubjectsTosubject")
  StudentPayments StudentPayments[] @relation(name: "studentpaymentsTosubject")
  TeacherPayments TeacherPayments[] @relation(name: "teacherpaymentsTosubject")
}

model Students {
  student_id String @id @default(cuid())
  username String @unique
  first_name String 
  last_name String 
  email String? @unique
  phone_number String?
  profile_img String?
  sex UserSex
  grade_id String 
  enrolment_date DateTime
  status Boolean

  Grades Grades @relation(name: "studentTograde", fields: [grade_id], references: [grade_id], onDelete: NoAction, onUpdate: Cascade)
  StudentSubjects StudentSubjects[] @relation(name: "StudentSubjectsTostudent")
  StudentPayments StudentPayments[] @relation(name: "studentpaymentsTostudent")
}


model Teachers {
  teacher_id String @id @default(cuid())
  username String @unique 
  email String? @unique
  first_name String
  surname String
  phone_number String @unique
  profile_img String?
  status Boolean

  TeacherSubjects TeacherSubjects[] @relation(name: "teachersubjectsToteacher")
  TeacherPayments TeacherPayments[] @relation(name: "teacherpaymentsToteacher")
}


model StudentSubjects {
  subject_id String
  student_id String
  enrollment_date DateTime
  status Boolean @default(true)

  Students Students @relation(name: "StudentSubjectsTostudent", fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: Cascade)
  Subjects Subjects @relation(name: "StudentSubjectsTosubject", fields: [subject_id], references: [subject_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([student_id, subject_id])
}

model TeacherSubjects {
  teacher_id     String
  subject_id     String
  assigned_date  DateTime
  status         Boolean @default(true)

  Teachers        Teachers @relation(name: "teachersubjectsToteacher", fields: [teacher_id], references: [teacher_id], onDelete: NoAction, onUpdate: Cascade)
  Subjects        Subjects @relation(name: "teachersubjectsTosubject", fields: [subject_id], references: [subject_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([teacher_id, subject_id])
}


model StudentPayments {
  payment_id     String      @id @default(cuid())
  student_id     String
  subject_id     String
  payment_date   DateTime
  amount         Decimal      @db.Decimal(5, 2)
  month_id       String

  Students        Students @relation(name: "studentpaymentsTostudent", fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: Cascade)
  Subjects        Subjects @relation(name: "studentpaymentsTosubject", fields: [subject_id], references: [subject_id], onDelete: NoAction, onUpdate: NoAction)
  Months          Months   @relation(name: "studentpaymentsTomonth", fields: [month_id], references: [month_id], onDelete: NoAction, onUpdate: NoAction)
}

model TeacherPayments {
  payment_id     String      @id @default(cuid())
  teacher_id     String
  subject_id     String
  payment_date   DateTime
  amount         Decimal
  month_id       String

  Teachers        Teachers @relation(name: "teacherpaymentsToteacher", fields: [teacher_id], references: [teacher_id], onDelete: NoAction, onUpdate: Cascade)
  Subjects        Subjects @relation(name: "teacherpaymentsTosubject", fields: [subject_id], references: [subject_id], onDelete: NoAction, onUpdate: NoAction)
  Months          Months   @relation(name: "teacherpaymentsTomonth", fields: [month_id], references: [month_id], onDelete: NoAction, onUpdate: NoAction)
}

model Months {
  month_id       String    @id
  StudentPayments StudentPayments[] @relation(name: "studentpaymentsTomonth")
  TeacherPayments TeacherPayments[] @relation(name: "teacherpaymentsTomonth")
}


