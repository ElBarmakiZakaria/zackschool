// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Grades {
  grade_id String @id
  Students Students[]
}

model Parents {
  parent_id Int @id @default(autoincrement())
  username String @unique
  first_name String 
  surname String 
  email String? @unique
  phone_number String? 
  StudentParent StudentParent[]
}

model Students {
  student_id Int @id @default(autoincrement())
  username String @unique
  first_name String 
  last_name String 
  email String? @unique
  phone_number String 
  sex UserSex
  grade_id String 
  enrolment_date DateTime
  status Boolean
  grade Grades @relation(fields: [grade_id], references: [grade_id])
  StudentParent StudentParent[]
  Payments Payment[]
  Attendance Attendance[]
  StudentSubject StudentSubject[]
}

model StudentParent {
  id Int @id @default(autoincrement())
  student_id Int
  parent_id Int

  student Students @relation(fields: [student_id], references: [student_id])
  parent Parents @relation(fields: [parent_id], references: [parent_id])

}
model Teachers {
  teacher_id Int @id @default(autoincrement())
  username String @unique 
  email String? @unique
  first_name String
  surname String
  phone_number String @unique
  status Boolean
  Subjects Subjects[]
  TeacherCommissions TeacherCommission[]
}

model Subjects {
  subject_id Int @id 
  subject_name String @unique 
  price Decimal @db.Decimal(5, 2)
  teacher_id Int?
  Teacher Teachers? @relation(fields: [teacher_id], references: [teacher_id])
  

}

model StudentSubject {
  id Int @id @default(autoincrement())
  subject_id Int
  student_id Int
  enrollment_date DateTime
  student Students @relation(fields: [student_id], references: [student_id])

}

model TeacherCommission {
  teacher_commission_id Int @id @default(autoincrement())
  teacher_id Int
  subject_id Int
  commission_amount Decimal? @db.Decimal(5, 2)
  commission_type String? 
  Teacher Teachers @relation(fields: [teacher_id], references: [teacher_id])
}

model Payment {
  payment_id Int @id @default(autoincrement())
  student_id Int
  amount Decimal? @db.Decimal(10, 2)
  due_amount Decimal? @db.Decimal(10, 2)
  balance Decimal? @db.Decimal(10, 2)
  payment_date DateTime
  paid Boolean
  Student Students @relation(fields: [student_id], references: [student_id])
}

model Attendance {
  attendance_id Int @id @default(autoincrement())
  student_id Int
  subject_id Int
  attendance_date DateTime
  attendance_status String? @db.VarChar(10)
  Student Students @relation(fields: [student_id], references: [student_id])
}

enum UserSex {
  MALE
  FEMALE
}